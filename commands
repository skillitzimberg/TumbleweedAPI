docker run --rm --name tumbleweed-db -e POSTGRES_PASSWORD=docker -d -p 5432:5432 -v /Users/ForeignFood/Development/TumbleweedAPI/volumes/postgres:/var/lib/postgresql/data postgres

docker exec -it tumbleweed-db psql -h localhost -p 5432 -U postgres

CREATE DATABASE tumbleweed;

CUSTOMERS

createCustomerTableStatement := `CREATE TABLE IF NOT EXISTS customers (id SERIAL PRIMARY KEY, first_name TEXT, last_name TEXT, phone TEXT, email TEXT UNIQUE NOT NULL, postalCode TEXT);`

INSERT INTO customers (first_name, last_name, phone, email, postalCode) VALUES ('Millicent', 'Zimdars', '9712717976', 'giesel@gmail.com', '97210');

curl -d "id=2&firstName=Godot&lastName=Bergler&phone=9712747176&email=dosey@gmail.com&postalCode=97211" -i -X PUT "localhost:3000/customers/edit"

curl -d "firstName=Guillermo&lastName=Zimberg&phone=5038905118&email=guido@gmail.com&postalCode=97211" -i -X POST "localhost:3000/customers/add"

curl -d "firstName=Scott&lastName=Bergler&phone=5038905118&email=mboink@gmail.com&postalCode=97211" -i -X POST "localhost:3000/customers/add"

curl -i localhost:3000/customers

curl -d "id=2&firstName=Godot&lastName=Bergler&phone=9712747176&email=dosey@gmail.com&postalCode=97211" -i -X PUT "localhost:3000/customers/edit"

curl -i -X GET "localhost:3000/customers/find?id=1"

curl -i -X DELETE "localhost:3000/customers/delete?id=1"

PRODUCTS

createProductTableStatement := `CREATE TABLE IF NOT EXISTS products (id SERIAL PRIMARY KEY, name TEXT, type TEXT, description TEXT, ingredients TEXT[], price NUMERIC(6, 2);`

INSERT INTO products (name, type, description, ingredients, price) VALUES ('Challa', 'Traditional', 'Braided and lightly sweet', '{"flour", "water", "sugar"}', 4.65);

INSERT INTO products (name, type, description, ingredients, price) VALUES ('Country Sour', 'sourdough', 'Rustic sourdough', ['flour', 'water', 'sugar', 'sour'], 4.65);

curl -d "id=35&name=Raisin Cinnamon Roll&type=shriveled&description=A breakfast too far&ingredients=flour water sugar raisins tabasco&price=6.43" -i -X PUT "localhost:3000/products/edit"

curl -i -X DELETE "localhost:3000/products/delete?id=35"

LOCATIONS

createLocationsTableStatement := `CREATE TABLE IF NOT EXISTS locations (id SERIAL PRIMARY KEY, name TEXT, description TEXT, address TEXT, city TEXT, state TEXT, postal_code TEXT);`

INSERT INTO locations (name, description, address, city, state, postal_code) VALUES ('Farmers Market', 'Mung beans & cows', '123 Main St', 'Alamosa', 'CO', '45632');

INSERT INTO locations (name, description, address, city, state, postal_code) VALUES ('Flea Market', '456 South Pacific Ave', 'Walsenburg', 'CO', '87612');

curl -d "name=Guidos Garage&description=Greasy finds&address=345 Tomgilden St&city=Cresent&state=CO&postalCode=97211" -i -X POST "localhost:3000/locations/add"

curl -d "id=2&name=Dog Run&description=shriveled chiles&address=908 20th Pl&city=Corbin&state=CO&postalCode=23454" -i -X PUT "localhost:3000/locations/edit"

curl -i -X DELETE "localhost:3000/locations/delete?id=3"

ORDERS

createOrdersTableStatement := `CREATE TABLE IF NOT EXISTS orders (id SERIAL PRIMARY KEY, customer_id INT, products_ordered ARRAY[][], pickup_location_id INT, pickup_date TEXT, order_total NUMERIC(6,2));`

INSERT INTO orders (name, description, address, city, state, postal_code) VALUES ('Farmers Market', 'Mung beans & cows', '123 Main St', 'Alamosa', 'CO', '45632');

INSERT INTO orders (name, description, address, city, state, postal_code) VALUES ('Flea Market', '456 South Pacific Ave', 'Walsenburg', 'CO', '87612');

curl -d "name=Guidos Garage&description=Greasy finds&address=345 Tomgilden St&city=Cresent&state=CO&postalCode=97211" -i -X POST "localhost:3000/orders/add"

curl -d "id=2&name=Dog Run&description=shriveled chiles&address=908 20th Pl&city=Corbin&state=CO&postalCode=23454" -i -X PUT "localhost:3000/orders/edit"

curl -i -X DELETE "localhost:3000/orders/delete?id=3"

ORDERS WILL HAVE:
Order ID
Customer ID
Array [Product ID, Qty]
Location ID
Pickup Date
Order Total

ORDERS WILL NEED FUNCTIONALITY FOR:
Getting customer name, phone, email
Getting product name, price (this might need CREATE TYPE . . . AS: https://www.postgresql.org/docs/9.5/rowtypes.html)
Getting location name, address
Calculating price for quantity of product
Calculating order Total

I think an order should as much as possible hold the minimum amount of information needed to calculate, generate, or find any necessary information.

I think the end point for orders might be 



STEPS FOR TROUBLESHOOTING CODE:
1. Summarize the problem
2. Provide background including what you've already tried
3. Show some code
4. Describe expected and actual results including any error messages
5. Have an appropriate amount of shame:
  - meaning if you are going to ask for help, how thorough have you actually been? 
  - Did you re-read everything? 
  - Look for typos? 
  - Consistent naming?
  - If you have working code that does similar things, have you tried changing that to mimic the behavior your getting with the current code?